#!/bin/bash

############################################################
#Function                                                  #
############################################################

#Help

Help()
{
printf "\033[90m############################################################\033[0m\n"
printf "                       \033[1m\033[4mscnx HELP\033[0m\n"
printf "\033[90m############################################################\033[0m\n"
printf "\n"
printf "scnx command allows to connect to screen while opennig them in an other terminal\n"
printf "\n"
printf "Requierement : \n"
printf "	> have 'screen' installed\n"
printf "	> have 'Konsole' installed\n"
printf "	(> if it is used on server, be connected in ssh -X (graphic options))\n"
printf "\n"
printf "\033[1mSyntaxe :\033[0m \033[94mscnx\033[0m [\033[94m-options\033[0m] [\033[94mscreen_name\033[0m]\n"
printf "\n"
printf "\033[1mOptions :\033[0m \n"
printf "	\033[94m-h\033[0m	display this message\n"
printf "\n"
printf "\033[90m############################################################\033[0m\n"
}

#search for substr in str
ExprIdx()
{
	fpos=$( echo $1 | grep -o -b "$2" | awk 'BEGIN {FS=":"}{print $1}')
	echo $fpos
}

#Warning sign
wrn()
{
printf "\033[5m\033[1m\033[93m<!>\033[0m\e[25m"
}

############################################################
#Main                                                      #
############################################################

#def Var

co=1

#get options

while getopts ":h" option;
do
	case $option in
	
      		h) # display Help
         		Help
			((co++))
         		exit;;
				
         	\?) # Invalid option
         		echo "Error: Invalid option"
         		exit;;
   	esac
done

#manage pointer
p_s_name=$(($co))
s_name=${!p_s_name}

#Get user name lentgh
ncus=$((-${#USER} - 29))
nct=$((-${#USER} - 29 - 36))

#get screen name if given
if [[ ${#s_name} != 0 ]] ; then
	out="False ys"
	s=$s_name
else
	out="False ns"
fi

#Main loop

while [[ $out == *"False"* ]];
do	
	#get screen list
	sl=$(screen -ls)
	
	#input
	if [[ $out == "False ns" ]] ; then
		printf "${sl:0:$ncus}\n"
		read -p "Screen to Connect is : " s
		out="False ys"
	elif [[ $out == "False off"* ]] ; then
		wrn
		printf " '\033[1m$s\033[0m' is not a screen, ${sl:0:$ncus}\nPlease choose one above : "
		read -p "" s
		out="False ys"
	elif [[ $out == *" on"* ]] ; then
		wrn
		printf " '\033[1m$s\033[0m' screen is already \033[90mAttached\033[0m, ${sl:0:$ncus}\nPlease choose one above \033[90mDetached\033[0m : "
		read -p "" s
		out="False ys"
	fi
	
	#get screen info
	out=$(ison -e -s $s)
	
	if [[ $out == "True on"* ]] ; then
		out="False on"
	fi
done

#Get screen wanted in new term
konsole -e bash -c "screen -r $s" & disown
